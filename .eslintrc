{
  "root": true,
  "parser": "@typescript-eslint/parser",
  "plugins": [
    "@typescript-eslint",
    "spellcheck",
    "promise"
  ],
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "@typeform/eslint-config"
  ],
  "rules": {
    "spellcheck/spell-checker": [
      "warn",
      {
        "comments": true,
        "strings": true,
        "identifiers": true,
        "lang": "en_US",
        "skipWords": [
          "dict",
          "aff",
          "hunspellchecker",
          "hunspell",
          "utils",
          "mousemove",
          "Dom",
          "trello",
          "toastr",
          "Ngx",
          "resync",
          "Ngb",
          "classlist",
          "Validators",
          "Webstorage",
          "ngsw",
          "scrollable",
          "urls",
          "rxjs",
          "iat",
          "workspace",
          "fas", // ICON,
          "globals",
          ////////////// SERVER ///////////////////
          "req",
          "res",
          "sendgrid",
          "axios",
          "Oauth",
          "0123456789abcdefghijklmnopqrstuvwxyz",
          "Cron",
          "dotenv",
          "Cors",
          "upsert",
          "sequelize",
          "Sequelize",
          "utf",
          "DTO",
          "youtube",
          "ytpl",
          "youtubedl",
          "ffmpeg",
          "fse",
          "chai",
          "bestaudio",
          "bestvideo",
          "youtubedl",
          "stderr",
          "mongodb",
          "unlink",
          "urlencoded",
          "favicon",
          "ico",
          "uri",
          "etag",
          "maxres",
          "nullable",
          "worstaudio",
          "uuidv4",
          "referer",
          "timestamptz"
        ],
        "skipIfMatch": [
          "http://[^s]*",
          "^[-\\w]+/[-\\w\\.]+$" //For MIME Types
        ],
        "skipWordIfMatch": [ // words that begin with foobar will not be checked
          "^foobar.*$",
          "^Renderer2.*$",
          "^renderer2.*$",
          ////////////// SERVER ///////////////////
        ],
        "minLength": 3
      }
    ],
    "no-restricted-globals": [
      "error",
      "event",
      "fdescribe",
      "document",
      "window",
      "localStorage",
      "location",
      "setInterval",
      "clearInterval",
      "setTimeout",
      "clearTimeout"
    ],
    "@typescript-eslint/explicit-module-boundary-types": [
      "off", // TODO : It should be on, require interface for all bojects
      {
        "allowedNames": [
          "ignoredFunctionName",
          "ignoredMethodName"
        ]
      }
    ],
    "quotes": [
      "error",
      "single"
    ],
    "no-multiple-empty-lines": "error",
    "no-console": [
      "error",
      {
        "allow": [
          "error"
        ]
      }
    ],
    "no-implicit-globals": "error",
    "indent": [
      "error",
      2
    ],
    "no-empty-function": "off",
    "@typescript-eslint/explicit-member-accessibility": [
      "error"
    ],
    "@typescript-eslint/no-empty-function": [
      "error",
      {
        "allow": [
          "constructors"
        ]
      }
    ],
    "@typescript-eslint/no-explicit-any": [
      "off",
      {
        "ignoreRestArgs": false
      }
    ],
    "@typescript-eslint/no-unused-vars": [
      "off"
    ],
    "semi": [
      "error"
    ],
    "promise/always-return": "error",
    "promise/no-return-wrap": "error",
    "promise/param-names": "error",
    "promise/catch-or-return": "error",
    "promise/no-native": "off",
    "promise/no-nesting": "error",
    "promise/no-promise-in-callback": "error",
    "promise/no-callback-in-promise": "error",
    "promise/avoid-new": "off",
    "promise/no-new-statics": "error",
    "promise/no-return-in-finally": "error",
    "promise/valid-params": "warn",
    "no-return-await": "error",
    "import/order": "off",
    "import/first": "off"
  }
}